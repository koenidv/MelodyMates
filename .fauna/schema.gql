type User {
	id: String! @unique(index: "user_id")
	profile_name: String!
	profile_image: String
	spotify_url: String!
	private: PrivateUserData! @relation(name: "user_private")
	posts: [Post!]! @relation(name: "user_posts")
}

type PrivateUserData {
	user: User! @relation(name: "user_private")
	profile_song: Song
	follows: [User!]!
	phone_hash: String
}

type FollowRequest {
	from: User!
	recipient: User!
}

type Song {
	id: String! @unique(index: "song_id")
	name: String!
	length_ms: Int!
	isrc: String!
	preview_url: String!
	artists: [Artist!]! @relation(name: "artist_songs")
	album: Album!
	original_creator_ref: String!
	in_posts: [Post!]! @relation(name: "post_song")
}

type Artist {
	id: String! @unique(index: "artist_id")
	name: String!
	albums: [Album!]! @relation(name: "artist_albums")
	songs: [Song!]! @relation(name: "artist_songs")
	original_creator_ref: String!
}

type Album {
	id: String! @unique(index: "album_id")
	name: String!
	cover_image: String
	theme_color: String
	artists: [Artist]! @relation(name: "artist_albums")
	original_creator_ref: String!
}

type Post {
	author: User! @relation(name: "user_posts")
	song: Song! @relation(name: "post_song")
	comment: String
}

type React {
	post: Post!
	author: User!
	emoji: String!
}

type Reply {
	post: Post!
	author: User!
	comment: String
	song: Song
}

type Query {
	allPosts: [Post!]
	allUsers: [User!]
}